{"name": "test_authenticate_user_success", "status": "failed", "statusDetails": {"message": "AssertionError: assert False", "trace": "user_account = 'PotonLee', user_password = '123'\n\n    def authenticate_user(user_account: str, user_password: str):\n        try:\n            # 查詢使用者資訊\n>           user_obj: User = session.scalars(select(User).where(User.user_account == user_account)).one()\n\nservice\\UserService.py:40: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\venv\\Lib\\site-packages\\sqlalchemy\\engine\\result.py:1827: in one\n    return self._only_one_row(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.engine.result.ScalarResult object at 0x00000263518AA8A0>\nraise_for_second_row = True, raise_for_none = True, scalar = False\n\n    def _only_one_row(\n        self,\n        raise_for_second_row: bool,\n        raise_for_none: bool,\n        scalar: bool,\n    ) -> Optional[_R]:\n        onerow = self._fetchone_impl\n    \n        row: Optional[_InterimRowType[Any]] = onerow(hard_close=True)\n        if row is None:\n            if raise_for_none:\n>               raise exc.NoResultFound(\n                    \"No row was found when one was required\"\n                )\nE               sqlalchemy.exc.NoResultFound: No row was found when one was required\n\n..\\venv\\Lib\\site-packages\\sqlalchemy\\engine\\result.py:760: NoResultFound\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_user_service.TestUserService object at 0x0000026351878650>\n\n    @pytest.mark.auth_success\n    def test_authenticate_user_success(self):\n        try:\n>           authenticate_user('PotonLee', '123')\n\ntest\\test_user_service.py:52: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nuser_account = 'PotonLee', user_password = '123'\n\n    def authenticate_user(user_account: str, user_password: str):\n        try:\n            # 查詢使用者資訊\n            user_obj: User = session.scalars(select(User).where(User.user_account == user_account)).one()\n        except Exception as e:\n            app_logger.error('Authentication failed: %s', e)\n            message = CommonSystemCode.DATABASE_FAILED.value.get('message')\n            system_code = CommonSystemCode.DATABASE_FAILED.value.get('system_code')\n>           raise BusinessError(error_code=system_code, message=message)\nE           exception.BusinessError.BusinessError: 目前資料庫異常，請稍候嘗試，或聯繫網站管理人員\n\nservice\\UserService.py:45: BusinessError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_user_service.TestUserService object at 0x0000026351878650>\n\n    @pytest.mark.auth_success\n    def test_authenticate_user_success(self):\n        try:\n            authenticate_user('PotonLee', '123')\n            assert True\n        except BusinessError:\n>           assert False\nE           assert False\n\ntest\\test_user_service.py:55: AssertionError"}, "attachments": [{"name": "log", "source": "eb3961fb-b6dd-4604-a53b-35f9c66325fd-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "4f80113f-ee95-472a-b92b-73b18f5448e3-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "1af3571f-1b35-4a4c-8e01-e2cd140c1434-attachment.txt", "type": "text/plain"}], "start": 1703060045707, "stop": 1703060045710, "uuid": "b31fb47d-3986-4bf9-a86c-64af69e41bfd", "historyId": "100c7b47a6240bda7a74b593f6a7f95b", "testCaseId": "100c7b47a6240bda7a74b593f6a7f95b", "fullName": "test.test_user_service.TestUserService#test_authenticate_user_success", "labels": [{"name": "tag", "value": "auth_success"}, {"name": "parentSuite", "value": "test"}, {"name": "suite", "value": "test_user_service"}, {"name": "subSuite", "value": "TestUserService"}, {"name": "host", "value": "LAPTOP-SJL5AU2K"}, {"name": "thread", "value": "59520-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test.test_user_service"}]}