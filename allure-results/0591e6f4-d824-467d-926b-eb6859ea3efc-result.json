{"name": "test_reset_new_password_success", "status": "failed", "statusDetails": {"message": "AssertionError: assert False", "trace": "self = <sqlalchemy.engine.base.Connection object at 0x0000026352B1F7D0>\ndialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x0000026350ADB3D0>\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x0000026351F36350>\nstatement = <sqlalchemy.dialects.postgresql.base.PGCompiler object at 0x0000026351F35F90>\nparameters = [{'param_1': 1, 'token_1': '3GTPtl4Nwj3zZcqsDIt0hDIA8xcTmZio2q8ks8RMTKM'}]\n\n    def _exec_single_context(\n        self,\n        dialect: Dialect,\n        context: ExecutionContext,\n        statement: Union[str, Compiled],\n        parameters: Optional[_AnyMultiExecuteParams],\n    ) -> CursorResult[Any]:\n        \"\"\"continue the _execute_context() method for a single DBAPI\n        cursor.execute() or cursor.executemany() call.\n    \n        \"\"\"\n        if dialect.bind_typing is BindTyping.SETINPUTSIZES:\n            generic_setinputsizes = context._prepare_set_input_sizes()\n    \n            if generic_setinputsizes:\n                try:\n                    dialect.do_set_input_sizes(\n                        context.cursor, generic_setinputsizes, context\n                    )\n                except BaseException as e:\n                    self._handle_dbapi_exception(\n                        e, str(statement), parameters, None, context\n                    )\n    \n        cursor, str_statement, parameters = (\n            context.cursor,\n            context.statement,\n            context.parameters,\n        )\n    \n        effective_parameters: Optional[_AnyExecuteParams]\n    \n        if not context.executemany:\n            effective_parameters = parameters[0]\n        else:\n            effective_parameters = parameters\n    \n        if self._has_events or self.engine._has_events:\n            for fn in self.dispatch.before_cursor_execute:\n                str_statement, effective_parameters = fn(\n                    self,\n                    cursor,\n                    str_statement,\n                    effective_parameters,\n                    context,\n                    context.executemany,\n                )\n    \n        if self._echo:\n            self._log_info(str_statement)\n    \n            stats = context._get_cache_stats()\n    \n            if not self.engine.hide_parameters:\n                self._log_info(\n                    \"[%s] %r\",\n                    stats,\n                    sql_util._repr_params(\n                        effective_parameters,\n                        batches=10,\n                        ismulti=context.executemany,\n                    ),\n                )\n            else:\n                self._log_info(\n                    \"[%s] [SQL parameters hidden due to hide_parameters=True]\",\n                    stats,\n                )\n    \n        evt_handled: bool = False\n        try:\n            if context.execute_style is ExecuteStyle.EXECUTEMANY:\n                effective_parameters = cast(\n                    \"_CoreMultiExecuteParams\", effective_parameters\n                )\n                if self.dialect._has_events:\n                    for fn in self.dialect.dispatch.do_executemany:\n                        if fn(\n                            cursor,\n                            str_statement,\n                            effective_parameters,\n                            context,\n                        ):\n                            evt_handled = True\n                            break\n                if not evt_handled:\n                    self.dialect.do_executemany(\n                        cursor,\n                        str_statement,\n                        effective_parameters,\n                        context,\n                    )\n            elif not effective_parameters and context.no_parameters:\n                if self.dialect._has_events:\n                    for fn in self.dialect.dispatch.do_execute_no_params:\n                        if fn(cursor, str_statement, context):\n                            evt_handled = True\n                            break\n                if not evt_handled:\n                    self.dialect.do_execute_no_params(\n                        cursor, str_statement, context\n                    )\n            else:\n                effective_parameters = cast(\n                    \"_CoreSingleExecuteParams\", effective_parameters\n                )\n                if self.dialect._has_events:\n                    for fn in self.dialect.dispatch.do_execute:\n                        if fn(\n                            cursor,\n                            str_statement,\n                            effective_parameters,\n                            context,\n                        ):\n                            evt_handled = True\n                            break\n                if not evt_handled:\n>                   self.dialect.do_execute(\n                        cursor, str_statement, effective_parameters, context\n                    )\n\n..\\venv\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1969: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x0000026350ADB3D0>\ncursor = <cursor object at 0x0000026351938D60; closed: -1>\nstatement = 'SELECT bookmazon.\"user\".user_account AS bookmazon_user_user_account \\nFROM bookmazon.\"user\" JOIN bookmazon.password_r...azon.password_reset_tokens.user_email \\nWHERE bookmazon.password_reset_tokens.token = %(token_1)s \\n LIMIT %(param_1)s'\nparameters = {'param_1': 1, 'token_1': '3GTPtl4Nwj3zZcqsDIt0hDIA8xcTmZio2q8ks8RMTKM'}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x0000026351F36350>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       psycopg2.errors.InFailedSqlTransaction: current transaction is aborted, commands ignored until end of transaction block\n\n..\\venv\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:922: InFailedSqlTransaction\n\nThe above exception was the direct cause of the following exception:\n\ntoken = '3GTPtl4Nwj3zZcqsDIt0hDIA8xcTmZio2q8ks8RMTKM', new_password = '123456'\nconfirm_password = '123456'\n\n    def reset_new_password(token: str, new_password: str, confirm_password: str):\n        if new_password != confirm_password:\n            message = UserSystemCode.PASSWORD_NOT_SAME.value.get('message')\n            system_code = UserSystemCode.PASSWORD_NOT_SAME.value.get('system_code')\n            raise BusinessError(error_code=system_code, message=message)\n    \n        try:\n            user_account_list = (session.query(User.user_account)\n                                 .join(PasswordResetToken, User.user_email == PasswordResetToken.user_email)\n                                 .where(PasswordResetToken.token == token)\n>                                .first())\n\nservice\\UserService.py:462: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\venv\\Lib\\site-packages\\sqlalchemy\\orm\\query.py:2748: in first\n    return self.limit(1)._iter().first()  # type: ignore\n..\\venv\\Lib\\site-packages\\sqlalchemy\\orm\\query.py:2847: in _iter\n    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(\n..\\venv\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:2308: in execute\n    return self._execute_internal(\n..\\venv\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:2190: in _execute_internal\n    result: Result[Any] = compile_state_cls.orm_execute_statement(\n..\\venv\\Lib\\site-packages\\sqlalchemy\\orm\\context.py:293: in orm_execute_statement\n    result = conn.execute(\n..\\venv\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1416: in execute\n    return meth(\n..\\venv\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py:516: in _execute_on_connection\n    return connection._execute_clauseelement(\n..\\venv\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1639: in _execute_clauseelement\n    ret = self._execute_context(\n..\\venv\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1848: in _execute_context\n    return self._exec_single_context(\n..\\venv\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1988: in _exec_single_context\n    self._handle_dbapi_exception(\n..\\venv\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2343: in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n..\\venv\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1969: in _exec_single_context\n    self.dialect.do_execute(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x0000026350ADB3D0>\ncursor = <cursor object at 0x0000026351938D60; closed: -1>\nstatement = 'SELECT bookmazon.\"user\".user_account AS bookmazon_user_user_account \\nFROM bookmazon.\"user\" JOIN bookmazon.password_r...azon.password_reset_tokens.user_email \\nWHERE bookmazon.password_reset_tokens.token = %(token_1)s \\n LIMIT %(param_1)s'\nparameters = {'param_1': 1, 'token_1': '3GTPtl4Nwj3zZcqsDIt0hDIA8xcTmZio2q8ks8RMTKM'}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x0000026351F36350>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       sqlalchemy.exc.InternalError: (psycopg2.errors.InFailedSqlTransaction) current transaction is aborted, commands ignored until end of transaction block\nE       \nE       [SQL: SELECT bookmazon.\"user\".user_account AS bookmazon_user_user_account \nE       FROM bookmazon.\"user\" JOIN bookmazon.password_reset_tokens ON bookmazon.\"user\".user_email = bookmazon.password_reset_tokens.user_email \nE       WHERE bookmazon.password_reset_tokens.token = %(token_1)s \nE        LIMIT %(param_1)s]\nE       [parameters: {'token_1': '3GTPtl4Nwj3zZcqsDIt0hDIA8xcTmZio2q8ks8RMTKM', 'param_1': 1}]\nE       (Background on this error at: https://sqlalche.me/e/20/2j85)\n\n..\\venv\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:922: InternalError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_user_service.TestUserService object at 0x0000026351881210>\n\n    @pytest.mark.reset_new_password_success\n    def test_reset_new_password_success(self):\n        try:\n>           reset_new_password('3GTPtl4Nwj3zZcqsDIt0hDIA8xcTmZio2q8ks8RMTKM', \"123456\", \"123456\")\n\ntest\\test_user_service.py:241: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ntoken = '3GTPtl4Nwj3zZcqsDIt0hDIA8xcTmZio2q8ks8RMTKM', new_password = '123456'\nconfirm_password = '123456'\n\n    def reset_new_password(token: str, new_password: str, confirm_password: str):\n        if new_password != confirm_password:\n            message = UserSystemCode.PASSWORD_NOT_SAME.value.get('message')\n            system_code = UserSystemCode.PASSWORD_NOT_SAME.value.get('system_code')\n            raise BusinessError(error_code=system_code, message=message)\n    \n        try:\n            user_account_list = (session.query(User.user_account)\n                                 .join(PasswordResetToken, User.user_email == PasswordResetToken.user_email)\n                                 .where(PasswordResetToken.token == token)\n                                 .first())\n            user_account: str = user_account_list[0]\n            hashed_password = generate_password_hash(new_password, method='pbkdf2:sha256')\n            # 更新密碼\n            statement = update(User).where(User.user_account == user_account).values(user_password=hashed_password)\n            session.execute(statement)\n            session.commit()\n            app_logger.info('Password changed successfully.')\n        except Exception as e:\n            session.rollback()\n            app_logger.error('Failed to change user password: %s', e)\n            message = UserSystemCode.EXPIRED_TOKEN.value.get('message')\n            system_code = UserSystemCode.EXPIRED_TOKEN.value.get('system_code')\n>           raise BusinessError(error_code=system_code, message=message)\nE           exception.BusinessError.BusinessError: Token 已經過期，請重新申請變更密碼\n\nservice\\UserService.py:475: BusinessError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_user_service.TestUserService object at 0x0000026351881210>\n\n    @pytest.mark.reset_new_password_success\n    def test_reset_new_password_success(self):\n        try:\n            reset_new_password('3GTPtl4Nwj3zZcqsDIt0hDIA8xcTmZio2q8ks8RMTKM', \"123456\", \"123456\")\n        except BusinessError as e:\n            system_code = UserSystemCode.OLD_PASSWORD_NOT_ALLOWED.value.get('system_code')\n            if e.error_code == system_code:\n                assert True\n            else:\n>               assert False\nE               assert False\n\ntest\\test_user_service.py:247: AssertionError"}, "attachments": [{"name": "log", "source": "2a8ccd5b-c4a6-4e31-9d93-5c05a40a51d9-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "d1da2cae-ba4e-4229-a83e-39ddd1b25763-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "56d3c499-b482-4cae-b27e-ed4fb13a457d-attachment.txt", "type": "text/plain"}], "start": 1703060047005, "stop": 1703060047007, "uuid": "3fe0268e-f8a9-444f-a3cb-16c74261294c", "historyId": "dfed5e2f409221389b7bbfcc94edb025", "testCaseId": "dfed5e2f409221389b7bbfcc94edb025", "fullName": "test.test_user_service.TestUserService#test_reset_new_password_success", "labels": [{"name": "tag", "value": "reset_new_password_success"}, {"name": "parentSuite", "value": "test"}, {"name": "suite", "value": "test_user_service"}, {"name": "subSuite", "value": "TestUserService"}, {"name": "host", "value": "LAPTOP-SJL5AU2K"}, {"name": "thread", "value": "59520-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test.test_user_service"}]}