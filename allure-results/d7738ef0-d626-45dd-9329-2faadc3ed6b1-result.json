{"name": "test_get_cart_items_success", "status": "failed", "statusDetails": {"message": "AssertionError: assert False", "trace": "self = <sqlalchemy.engine.base.Connection object at 0x000002635199B410>\ndialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x0000026350ADB3D0>\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000263518CBD50>\nstatement = <sqlalchemy.dialects.postgresql.base.PGCompiler object at 0x0000026351971910>\nparameters = [{'create_datetime': datetime.datetime(2023, 12, 20, 16, 14, 5, 146020), 'update_datetime': datetime.datetime(2023, 12, 20, 16, 14, 4, 531570), 'user_account': 'invalid_user_account1'}]\n\n    def _exec_single_context(\n        self,\n        dialect: Dialect,\n        context: ExecutionContext,\n        statement: Union[str, Compiled],\n        parameters: Optional[_AnyMultiExecuteParams],\n    ) -> CursorResult[Any]:\n        \"\"\"continue the _execute_context() method for a single DBAPI\n        cursor.execute() or cursor.executemany() call.\n    \n        \"\"\"\n        if dialect.bind_typing is BindTyping.SETINPUTSIZES:\n            generic_setinputsizes = context._prepare_set_input_sizes()\n    \n            if generic_setinputsizes:\n                try:\n                    dialect.do_set_input_sizes(\n                        context.cursor, generic_setinputsizes, context\n                    )\n                except BaseException as e:\n                    self._handle_dbapi_exception(\n                        e, str(statement), parameters, None, context\n                    )\n    \n        cursor, str_statement, parameters = (\n            context.cursor,\n            context.statement,\n            context.parameters,\n        )\n    \n        effective_parameters: Optional[_AnyExecuteParams]\n    \n        if not context.executemany:\n            effective_parameters = parameters[0]\n        else:\n            effective_parameters = parameters\n    \n        if self._has_events or self.engine._has_events:\n            for fn in self.dispatch.before_cursor_execute:\n                str_statement, effective_parameters = fn(\n                    self,\n                    cursor,\n                    str_statement,\n                    effective_parameters,\n                    context,\n                    context.executemany,\n                )\n    \n        if self._echo:\n            self._log_info(str_statement)\n    \n            stats = context._get_cache_stats()\n    \n            if not self.engine.hide_parameters:\n                self._log_info(\n                    \"[%s] %r\",\n                    stats,\n                    sql_util._repr_params(\n                        effective_parameters,\n                        batches=10,\n                        ismulti=context.executemany,\n                    ),\n                )\n            else:\n                self._log_info(\n                    \"[%s] [SQL parameters hidden due to hide_parameters=True]\",\n                    stats,\n                )\n    \n        evt_handled: bool = False\n        try:\n            if context.execute_style is ExecuteStyle.EXECUTEMANY:\n                effective_parameters = cast(\n                    \"_CoreMultiExecuteParams\", effective_parameters\n                )\n                if self.dialect._has_events:\n                    for fn in self.dialect.dispatch.do_executemany:\n                        if fn(\n                            cursor,\n                            str_statement,\n                            effective_parameters,\n                            context,\n                        ):\n                            evt_handled = True\n                            break\n                if not evt_handled:\n                    self.dialect.do_executemany(\n                        cursor,\n                        str_statement,\n                        effective_parameters,\n                        context,\n                    )\n            elif not effective_parameters and context.no_parameters:\n                if self.dialect._has_events:\n                    for fn in self.dialect.dispatch.do_execute_no_params:\n                        if fn(cursor, str_statement, context):\n                            evt_handled = True\n                            break\n                if not evt_handled:\n                    self.dialect.do_execute_no_params(\n                        cursor, str_statement, context\n                    )\n            else:\n                effective_parameters = cast(\n                    \"_CoreSingleExecuteParams\", effective_parameters\n                )\n                if self.dialect._has_events:\n                    for fn in self.dialect.dispatch.do_execute:\n                        if fn(\n                            cursor,\n                            str_statement,\n                            effective_parameters,\n                            context,\n                        ):\n                            evt_handled = True\n                            break\n                if not evt_handled:\n>                   self.dialect.do_execute(\n                        cursor, str_statement, effective_parameters, context\n                    )\n\n..\\venv\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1969: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x0000026350ADB3D0>\ncursor = <cursor object at 0x000002635189E0A0; closed: -1>\nstatement = 'INSERT INTO bookmazon.cart (user_account, update_datetime, create_datetime) VALUES (%(user_account)s, %(update_datetime)s, %(create_datetime)s) RETURNING bookmazon.cart.cart_id'\nparameters = {'create_datetime': datetime.datetime(2023, 12, 20, 16, 14, 5, 146020), 'update_datetime': datetime.datetime(2023, 12, 20, 16, 14, 4, 531570), 'user_account': 'invalid_user_account1'}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000263518CBD50>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       psycopg2.errors.StringDataRightTruncation: value too long for type character varying(20)\n\n..\\venv\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:922: StringDataRightTruncation\n\nThe above exception was the direct cause of the following exception:\n\nuser_account = 'User0006'\n\n    def get_cart_items(user_account):\n        try:\n>           cart = session.query(Cart).where(Cart.user_account == user_account).first()\n\nservice\\CartService.py:162: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\venv\\Lib\\site-packages\\sqlalchemy\\orm\\query.py:2748: in first\n    return self.limit(1)._iter().first()  # type: ignore\n..\\venv\\Lib\\site-packages\\sqlalchemy\\orm\\query.py:2847: in _iter\n    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(\n..\\venv\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:2308: in execute\n    return self._execute_internal(\n..\\venv\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:2169: in _execute_internal\n    ) = compile_state_cls.orm_pre_session_exec(\n..\\venv\\Lib\\site-packages\\sqlalchemy\\orm\\context.py:551: in orm_pre_session_exec\n    session._autoflush()\n..\\venv\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:3021: in _autoflush\n    raise e.with_traceback(sys.exc_info()[2])\n..\\venv\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:3010: in _autoflush\n    self.flush()\n..\\venv\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4312: in flush\n    self._flush(objects)\n..\\venv\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4447: in _flush\n    with util.safe_reraise():\n..\\venv\\Lib\\site-packages\\sqlalchemy\\util\\langhelpers.py:146: in __exit__\n    raise exc_value.with_traceback(exc_tb)\n..\\venv\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:4408: in _flush\n    flush_context.execute()\n..\\venv\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:466: in execute\n    rec.execute(self)\n..\\venv\\Lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py:642: in execute\n    util.preloaded.orm_persistence.save_obj(\n..\\venv\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:93: in save_obj\n    _emit_insert_statements(\n..\\venv\\Lib\\site-packages\\sqlalchemy\\orm\\persistence.py:1226: in _emit_insert_statements\n    result = connection.execute(\n..\\venv\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1416: in execute\n    return meth(\n..\\venv\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py:516: in _execute_on_connection\n    return connection._execute_clauseelement(\n..\\venv\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1639: in _execute_clauseelement\n    ret = self._execute_context(\n..\\venv\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1848: in _execute_context\n    return self._exec_single_context(\n..\\venv\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1988: in _exec_single_context\n    self._handle_dbapi_exception(\n..\\venv\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2343: in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n..\\venv\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1969: in _exec_single_context\n    self.dialect.do_execute(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x0000026350ADB3D0>\ncursor = <cursor object at 0x000002635189E0A0; closed: -1>\nstatement = 'INSERT INTO bookmazon.cart (user_account, update_datetime, create_datetime) VALUES (%(user_account)s, %(update_datetime)s, %(create_datetime)s) RETURNING bookmazon.cart.cart_id'\nparameters = {'create_datetime': datetime.datetime(2023, 12, 20, 16, 14, 5, 146020), 'update_datetime': datetime.datetime(2023, 12, 20, 16, 14, 4, 531570), 'user_account': 'invalid_user_account1'}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x00000263518CBD50>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       sqlalchemy.exc.DataError: (raised as a result of Query-invoked autoflush; consider using a session.no_autoflush block if this flush is occurring prematurely)\nE       (psycopg2.errors.StringDataRightTruncation) value too long for type character varying(20)\nE       \nE       [SQL: INSERT INTO bookmazon.cart (user_account, update_datetime, create_datetime) VALUES (%(user_account)s, %(update_datetime)s, %(create_datetime)s) RETURNING bookmazon.cart.cart_id]\nE       [parameters: {'user_account': 'invalid_user_account1', 'update_datetime': datetime.datetime(2023, 12, 20, 16, 14, 4, 531570), 'create_datetime': datetime.datetime(2023, 12, 20, 16, 14, 5, 146020)}]\nE       (Background on this error at: https://sqlalche.me/e/20/9h9h)\n\n..\\venv\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:922: DataError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_cart_service.TestCartService object at 0x0000026350F0B090>\n\n    @pytest.mark.get_cart_items_success\n    def test_get_cart_items_success(self):\n        user_account = user\n        try:\n>           cart_items = get_cart_items(user_account)\n\ntest\\test_cart_service.py:264: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nuser_account = 'User0006'\n\n    def get_cart_items(user_account):\n        try:\n            cart = session.query(Cart).where(Cart.user_account == user_account).first()\n            if cart:\n                cart_items_query = session.query(CartItem, Item, Book).join(\n                    Item, CartItem.item_id == Item.item_id).join(\n                    Book, Item.book_id == Book.book_id).where(\n                    CartItem.cart_id == cart.cart_id).all()\n                return cart_items_query\n            return []\n        except SQLAlchemyError as e:\n            app_logger.error('Database error during cart retrieval: %s', e)\n            error_code = ShoppingCartSystemCode.QUANTITY_EXCEEDS_STOCK.value.get('system_code')\n            message = ShoppingCartSystemCode.QUANTITY_EXCEEDS_STOCK.value.get('message')\n>           raise BusinessError(message=message, error_code=error_code)\nE           exception.BusinessError.BusinessError: 購物車中的商品數量超出庫存，無法再添加\n\nservice\\CartService.py:174: BusinessError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_cart_service.TestCartService object at 0x0000026350F0B090>\n\n    @pytest.mark.get_cart_items_success\n    def test_get_cart_items_success(self):\n        user_account = user\n        try:\n            cart_items = get_cart_items(user_account)\n            if cart_items is None:\n                assert get_cart_items(user_account) is None\n            else:\n                assert get_cart_items(user_account) is not None\n        except BusinessError:\n>           assert False\nE           assert False\n\ntest\\test_cart_service.py:270: AssertionError"}, "attachments": [{"name": "log", "source": "adaced03-258b-48cb-89dc-6427c8a99e86-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "4ce44f16-b9e2-467d-bd43-24c88250e6d6-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "1edda2cd-ea3e-4a45-9c6f-28dfc859971e-attachment.txt", "type": "text/plain"}], "start": 1703060045150, "stop": 1703060045155, "uuid": "0ecb3b56-b93a-45be-8a4d-446515f1f516", "historyId": "eb3b25bd1673c119647dfdfd0232d6de", "testCaseId": "eb3b25bd1673c119647dfdfd0232d6de", "fullName": "test.test_cart_service.TestCartService#test_get_cart_items_success", "labels": [{"name": "tag", "value": "get_cart_items_success"}, {"name": "parentSuite", "value": "test"}, {"name": "suite", "value": "test_cart_service"}, {"name": "subSuite", "value": "TestCartService"}, {"name": "host", "value": "LAPTOP-SJL5AU2K"}, {"name": "thread", "value": "59520-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test.test_cart_service"}]}