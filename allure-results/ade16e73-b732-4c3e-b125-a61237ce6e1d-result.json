{"name": "test_change_user_password_success", "status": "failed", "statusDetails": {"message": "AssertionError: assert False", "trace": "user_account = 'Lisa', user_password = '123'\n\n    def authenticate_user(user_account: str, user_password: str):\n        try:\n            # 查詢使用者資訊\n>           user_obj: User = session.scalars(select(User).where(User.user_account == user_account)).one()\n\nservice\\UserService.py:40: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\venv\\Lib\\site-packages\\sqlalchemy\\engine\\result.py:1827: in one\n    return self._only_one_row(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.engine.result.ScalarResult object at 0x000002635252DFE0>\nraise_for_second_row = True, raise_for_none = True, scalar = False\n\n    def _only_one_row(\n        self,\n        raise_for_second_row: bool,\n        raise_for_none: bool,\n        scalar: bool,\n    ) -> Optional[_R]:\n        onerow = self._fetchone_impl\n    \n        row: Optional[_InterimRowType[Any]] = onerow(hard_close=True)\n        if row is None:\n            if raise_for_none:\n>               raise exc.NoResultFound(\n                    \"No row was found when one was required\"\n                )\nE               sqlalchemy.exc.NoResultFound: No row was found when one was required\n\n..\\venv\\Lib\\site-packages\\sqlalchemy\\engine\\result.py:760: NoResultFound\n\nDuring handling of the above exception, another exception occurred:\n\nuser_account = 'Lisa', current_password = '123', new_password = '12345'\n\n    def change_user_password(user_account: str, current_password: str, new_password: str):\n        # 驗證舊密碼是否正確\n        try:\n>           authenticate_user(user_account, current_password)\n\nservice\\UserService.py:231: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nuser_account = 'Lisa', user_password = '123'\n\n    def authenticate_user(user_account: str, user_password: str):\n        try:\n            # 查詢使用者資訊\n            user_obj: User = session.scalars(select(User).where(User.user_account == user_account)).one()\n        except Exception as e:\n            app_logger.error('Authentication failed: %s', e)\n            message = CommonSystemCode.DATABASE_FAILED.value.get('message')\n            system_code = CommonSystemCode.DATABASE_FAILED.value.get('system_code')\n>           raise BusinessError(error_code=system_code, message=message)\nE           exception.BusinessError.BusinessError: 目前資料庫異常，請稍候嘗試，或聯繫網站管理人員\n\nservice\\UserService.py:45: BusinessError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_user_service.TestUserService object at 0x000002635187ADD0>\n\n    @pytest.mark.change_user_password_success\n    def test_change_user_password_success(self):\n        try:\n>           change_user_password(\"Lisa\", \"123\", \"12345\")\n\ntest\\test_user_service.py:143: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nuser_account = 'Lisa', current_password = '123', new_password = '12345'\n\n    def change_user_password(user_account: str, current_password: str, new_password: str):\n        # 驗證舊密碼是否正確\n        try:\n            authenticate_user(user_account, current_password)\n            app_logger.error('Failed to change password. Incorrect current password.')\n        except BusinessError:\n            message = UserSystemCode.IS_NOT_OLD_PASSWORD.value.get('message')\n            system_code = UserSystemCode.IS_NOT_OLD_PASSWORD.value.get('system_code')\n>           raise BusinessError(error_code=system_code, message=message)\nE           exception.BusinessError.BusinessError: 舊密碼輸入錯誤\n\nservice\\UserService.py:236: BusinessError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_user_service.TestUserService object at 0x000002635187ADD0>\n\n    @pytest.mark.change_user_password_success\n    def test_change_user_password_success(self):\n        try:\n            change_user_password(\"Lisa\", \"123\", \"12345\")\n            user_obj: User = session.scalars(select(User).where(User.user_account == \"Lisa\")).one()\n            # 驗證密碼是否正確\n            if check_password_hash(user_obj.user_password, \"12345\"):\n                assert True\n            else:\n                assert False\n        except BusinessError:\n>           assert False\nE           assert False\n\ntest\\test_user_service.py:151: AssertionError"}, "attachments": [{"name": "log", "source": "a4a080c4-5a4b-45e9-af6a-c2e9a2552bf3-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "ca1b9878-875f-480c-9f16-99c742c5e43c-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "e4f9e1d9-b0e6-4874-bd1c-3cd11ebe6893-attachment.txt", "type": "text/plain"}], "start": 1703060046393, "stop": 1703060046395, "uuid": "87503305-90c2-4a1e-962f-3e51fdce07a1", "historyId": "d449837b6ab25963ea1087f2aa008da5", "testCaseId": "d449837b6ab25963ea1087f2aa008da5", "fullName": "test.test_user_service.TestUserService#test_change_user_password_success", "labels": [{"name": "tag", "value": "change_user_password_success"}, {"name": "parentSuite", "value": "test"}, {"name": "suite", "value": "test_user_service"}, {"name": "subSuite", "value": "TestUserService"}, {"name": "host", "value": "LAPTOP-SJL5AU2K"}, {"name": "thread", "value": "59520-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test.test_user_service"}]}