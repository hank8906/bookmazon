{"name": "test_add_to_cart_success", "status": "broken", "statusDetails": {"message": "exception.BusinessError.BusinessError: 目前資料庫異常，請稍候嘗試，或聯繫網站管理人員", "trace": "self = <sqlalchemy.orm.session.Session object at 0x000002634E769010>\ninstance = None\n\n    def delete(self, instance: object) -> None:\n        \"\"\"Mark an instance as deleted.\n    \n        The object is assumed to be either :term:`persistent` or\n        :term:`detached` when passed; after the method is called, the\n        object will remain in the :term:`persistent` state until the next\n        flush proceeds.  During this time, the object will also be a member\n        of the :attr:`_orm.Session.deleted` collection.\n    \n        When the next flush proceeds, the object will move to the\n        :term:`deleted` state, indicating a ``DELETE`` statement was emitted\n        for its row within the current transaction.   When the transaction\n        is successfully committed,\n        the deleted object is moved to the :term:`detached` state and is\n        no longer present within this :class:`_orm.Session`.\n    \n        .. seealso::\n    \n            :ref:`session_deleting` - at :ref:`session_basics`\n    \n        \"\"\"\n        if self._warn_on_events:\n            self._flush_warning(\"Session.delete()\")\n    \n        try:\n>           state = attributes.instance_state(instance)\nE           AttributeError: 'NoneType' object has no attribute '_sa_instance_state'\n\n..\\venv\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:3494: AttributeError\n\nThe above exception was the direct cause of the following exception:\n\ncart_item_id = 3\n\n    def remove_item_from_cart(cart_item_id):\n        try:\n            cart_item = session.query(CartItem).where(\n                CartItem.cart_item_id == cart_item_id).first()\n>           session.delete(cart_item)\n\nservice\\CartService.py:189: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\venv\\Lib\\site-packages\\sqlalchemy\\orm\\scoping.py:673: in delete\n    return self._proxied.delete(instance)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.orm.session.Session object at 0x000002634E769010>\ninstance = None\n\n    def delete(self, instance: object) -> None:\n        \"\"\"Mark an instance as deleted.\n    \n        The object is assumed to be either :term:`persistent` or\n        :term:`detached` when passed; after the method is called, the\n        object will remain in the :term:`persistent` state until the next\n        flush proceeds.  During this time, the object will also be a member\n        of the :attr:`_orm.Session.deleted` collection.\n    \n        When the next flush proceeds, the object will move to the\n        :term:`deleted` state, indicating a ``DELETE`` statement was emitted\n        for its row within the current transaction.   When the transaction\n        is successfully committed,\n        the deleted object is moved to the :term:`detached` state and is\n        no longer present within this :class:`_orm.Session`.\n    \n        .. seealso::\n    \n            :ref:`session_deleting` - at :ref:`session_basics`\n    \n        \"\"\"\n        if self._warn_on_events:\n            self._flush_warning(\"Session.delete()\")\n    \n        try:\n            state = attributes.instance_state(instance)\n        except exc.NO_STATE as err:\n>           raise exc.UnmappedInstanceError(instance) from err\nE           sqlalchemy.orm.exc.UnmappedInstanceError: Class 'builtins.NoneType' is not mapped\n\n..\\venv\\Lib\\site-packages\\sqlalchemy\\orm\\session.py:3496: UnmappedInstanceError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_cart_service.TestCartService object at 0x0000026350A79E50>\n\n    @pytest.mark.add_to_cart_success\n    def test_add_to_cart_success(self):\n        user_account = user\n        item_id = item\n        quantity = 1\n        # original cart item count\n        old_item_count = get_cart_designated_item_count(user_account, item_id)\n    \n        try:\n            item_count = session.query(Item).where(Item.item_id == item_id).first().book_count\n    \n            # if cart item count already >= item quantity, delete cart item first\n            if get_cart_designated_item_count(user_account, item_id) >= item_count:\n                cart_item_id = session.query(CartItem).where(CartItem.item_id == item_id).first().cart_item_id\n                remove_item_from_cart(cart_item_id)\n                count = 0\n            else:\n                count = old_item_count\n    \n            # add item to cart\n            add_item_to_cart(user_account, item_id, quantity)\n            new_item_count = get_cart_designated_item_count(user_account, item_id)\n    \n            assert count + quantity == new_item_count\n        except BusinessError:\n            assert False\n        # modify the item amount back to the original amount\n>       remove_item_from_cart(item_id)\n\ntest\\test_cart_service.py:71: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncart_item_id = 3\n\n    def remove_item_from_cart(cart_item_id):\n        try:\n            cart_item = session.query(CartItem).where(\n                CartItem.cart_item_id == cart_item_id).first()\n            session.delete(cart_item)\n            session.commit()\n        except SQLAlchemyError as e:\n            session.rollback()\n            app_logger.error('Database transaction error: %s', e)\n            error_code = CommonSystemCode.DATABASE_FAILED.value.get('system_code')\n            message = CommonSystemCode.DATABASE_FAILED.value.get('message')\n>           raise BusinessError(message=message, error_code=error_code)\nE           exception.BusinessError.BusinessError: 目前資料庫異常，請稍候嘗試，或聯繫網站管理人員\n\nservice\\CartService.py:196: BusinessError"}, "attachments": [{"name": "log", "source": "df4fd442-6be0-421b-8c06-5d82579fc5b9-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "f557b4e7-e905-4879-93f0-1bca1cf39b75-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "eabf63db-3bd3-4c99-9171-12afbe7f69fb-attachment.txt", "type": "text/plain"}], "start": 1703060044815, "stop": 1703060044842, "uuid": "ea17fc0a-d41d-48d2-a545-b08017b061ad", "historyId": "a463eb0bfbd7ec028138e8b6d55c6cbc", "testCaseId": "a463eb0bfbd7ec028138e8b6d55c6cbc", "fullName": "test.test_cart_service.TestCartService#test_add_to_cart_success", "labels": [{"name": "tag", "value": "add_to_cart_success"}, {"name": "parentSuite", "value": "test"}, {"name": "suite", "value": "test_cart_service"}, {"name": "subSuite", "value": "TestCartService"}, {"name": "host", "value": "LAPTOP-SJL5AU2K"}, {"name": "thread", "value": "59520-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test.test_cart_service"}]}